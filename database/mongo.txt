MONGO

General
- document based noSQL database
- stores in JSON like documents (BSON)
- flexible structure to store data

SQL vs noSQL
  - Terms
    - table -> collection
    - column -> field
    - row -> document
    - foreign key -> sub-document (reference)

Mongo Terminal
- switch to database 
  - "use <dbName>"
- execute command
  - db.<collection>.<command>

Mongo Queries
- AND
  - { $and : [{"key1":"value1"}, {"key2":"value2"}] }
- OR
  - { $or : [{"key1":"value1"}, {"key2":"value2"}] }
- IN
  - returns all documents that match any specified values for a given field
  - { "name": { $in : ["Sean", "John", "Mary"] }
- update
  - db.<collection>.update(<query>, <set value>)
    - finds all documents that match query, then updates only ONE documents with values specified by $set (or adds new keey/value too each)
    - query: { "name": "Sean"}
    - set: { $set : { "anyField" : "anyValue" }, {"anotherField" : "anotherValue"} }
  - db.<collection>.updateMany(<query>, <set value>)
    - finds all documents that match query, then updates ALL documents with values specified by $set (or adds new keey/value too each)
- delete
  - db.<collection>.remove(<query>)
    - finds all documents that match query, then deletes ALL documents that match query
- find
  - db.<collection>.find(<query>)
    - finds all documents that match query

Mongo Repository
- Main class
  - @EnableMongoRepositories("com.example.repository")
- @Repository
  public interface StudentRepository extends MongoRepository<Student, String> {}
- autowire the repository into the service class
- create document
  - studentRepository.save(student)
- read document
  - studentRepository.findById(id)
- get all documents
  - studentRepository.findAll()
- update document
  - studentRepository.save(student)
- delete document
  - studentRepository.deleteById(id)

Spring Data MongoDB
- annotations
  - @Document(collection="collectionName")
    public class collectionName {}
  - @Field(name="fieldName")
    - not needed if field name is same as collection field name, only if they are different
  - @Id
  -@PersistenceConstructor 
    - when class has more than one constructor





















