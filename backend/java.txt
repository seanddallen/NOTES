OBJECT ORIENTED PROGRAMMING
- Class: template to create instance of an object
  - defines state (fields) and behavior (methods), state can change through methods
  - all classes inherit from Object class which has own fields/methods
  - methods
    - toString() - used to print content of an object
    - equals() - used to compare 2 objects
      - defaults compares if they point to same object (same reference, ==), need to override to compare if contents equal
    - hashCode() - used to decide which group/bucket an object should be put into
- Object: instance of a class
  - instanceOf - used to check if an object is a particular type (class, interface)
- Inheritance
  - subclass can extend/inherit the fields/methods of the parent class
  - constructor: method used to create instance of the object
    - has same name as class, no return type, and can accept any number of parameters
    - default constructor: used by compiler if none defined (has no arguments - noArgs)
    - this() - 
    - super() - used to call super class constructor from subclass (auto invoked if not called)
- Polymorphism
  - method overloading: method with same name but different parameters
  - method overriding: method with same name and parameters (signature) but with differently defined functionality
- Abstraction
  - Interface: defines a contract for the methods that must be implemented in a class (common actions that can be used by multiple classes)
    - variables are always public static final
    - methods are always public and abstract
    - like classes, interfaces can also be extended, and a class can implement (subscribe to) multiple interfaces
  - Abstract Class: used for classes that will define bases of shared state/behavior to be extended, but themselves will not be implemented
    - only theiir subclasses will create concrete instances (ie AbstractMap vs HashMap)
    - use when there is a lot of shared functionality between classes, then differences can be defined in subclasses
  - Abstract Method: method whose body is not defined, it will be defined in subclasses
  - Abstract Class vs Interface
    - 
- Encapsulation
  - hiding the implementation of a class behind a well defined interface
    - helps to change implementation without breaking code
  - Coupling: measure of how much a class is dependent on other classes
  - Cohesion: meeasure of how related the responsibilities/methods of a class are
  - inner class: class created within another class, often when only used by that class
    - static inner class: inner class that can be instantiated without the outer class

JAVA PLATFORM
- Platform Independent (build once, run anywhere)
  - jar file can be run on windows/mac/linux (with JVM installed)
  - .java code gets compiled to .class files which contain byte code which JVM can convert to executable code for OS
- JDK(JRE(JVM))
  - JDK 
    - javac, jar, debugging tools, javap
    - used to compile/debug Java 
    - used by devs to have full functionality to compile, debug, and run Java code
  - JRE
    - java, javaw, libraries (core java code/libraries)
    - Used to run Java program
  - JVM
    - Just-In-Time Compiler (JIT)
    - converts complied bytecode into executable code
- ClassLoader
  - For a program to run the JVM uses the ClassLoader to load all classes needed
  - 3 class loaders
    - system class loader: loads all classes from CLASSPATH (classes you write)
      - CLASSPATH
        - searches all jars found at classpath location
    - extension class loader: loads all classes from extension directory (classes from frameworks/dependencies used)
    - bootstrap class loader: loads all classes from Java core files (classes from Java system)

WRAPPER CLASSES
- wrappers wrap around basic primitive variable types to give it characteristics/methods of an Object (ie Int -> Integer)
- Boolean, Character, Byte, Short, Long, Integer, Double
- Autoboxing
  - automatic conversion Java compiler makes between primitive types and their corresponding object wrappers
- Casting
  - to convert one data type to another
  - implicit casting: done by compiler
  - explicit casting: done by code
    - int intNum = (int)longNum  //casts long to int

STRINGS
- All strings are immutible objects, if changed a new instance is created
- many String methods return the new String
- StringBuffer
  - allows same string to be modified so new instances dont need to be created
  - can improve performance if many changes needed (loops, etc)
- StringBuilder
  - similar to StringBuffer except is faster but not threasafe

MODIFIERS
- Default is when no modifiers used, only has access to classes in same package
- Public: can be accessed by all other classes
- Private: can only be accessed in the class it is used
- Protected: can be accessed by same package, including any subclass of the protected methods/variables
- Final: cannot be extended (class), changed (variable), or overridden (method)
- Static: shared/used by each instance of the class, not new per instance, and can be accessed directly on class without new instance
  - applies to the class itself, not to specific instances of the class
  - static variables
    - can only be accessed on the class, not on any instance
  - static methods
    - can only be called by the class, not any instance
    - instance variables cant be accessed in static methods

CONDITIONS
- if(boolean){...}
- switch(case){...}

LOOPS
- for in
  - for(String item:list){...}

EXCEPTION HANDLING
- Throwable (highest class)
  - Error: cannot do anything
  - Exception: can handle and move forward
    - checked: do handle/throw
      - The Java compiler enforces you to either catch or declare that your method might throw a checked exception. 
      - Checked exceptions are typically associated with external factors that can be handled or recovered from (file not found, database/network connection errors, etc)
    - unchecked: do not handle/throw
      - The Java compiler doesn't require you to handle or declare unchecked exceptions. 
      - Unchecked exceptions often indicate programming errors or logical errors within the code, such as NullPointerException
      - any exception that extends RuntimeException is unchecked

COLLECTIONS
- Collection (highest level interface) 
  - List: non-unique list, position in array matters, can add/remove in anyy position, added to end when not specified
    - ArrayList
      - faster for iteration, slower for insertion/removal
    - LinkedList: elements are doubly linked (front/back)
      - Ideal for stacks/queues
      - slower for iteration, faster for insertion/removal
    - Vector: same as the ArrayList but sychronized
    - List Methods
      - get(index), set(index), add/remove
      - indexOf(), lastIndexOf()
  - Set: unique list, noo duplications
    - sortedSet: maintains elements in sorted order
    - hashSet: unordered, iterates in random order, uses hasCode()
    - linkedHashSet: ordered, iterates in order of insertion
    - TreeSet: stored in sorted order, contains navigation helper methods
  - Queue: First in First Out (FIFO)
    - Dequeue: queue with processing on both ends, can add/remove from beginning and/or end of queue
    - BlockingQueue: queue with wait (until ready) feature
  - Map: stores key/value pairs (does not extend Collection)
    - sortedMap: maintains keys in sorted order
    - hashMap: unordered, iterates in random order, uses hasCode()
      - slower for iteration, faster for insertion/removal
    - hashTable: same as the hashMap but sychronized
    - linkedHashMap: ordered, iterates in order of insertion
      - faster for iteration, slower for insertion/removal
    - TreeMap: stored in sorted order, contains navigation helper methods
    - Map Methods
      - get(key), put(key, val), remove(key)
      - containsKey(), containsValue()
      - keySet() - get list of keys, values()- get list of keys, entrySet()- get list of key/value pairs
- Collection Methods
  - add(), remove()
  - contains(), size(), isEmpty()
- Concurrent Collections
  - only one thread executed at a time, uses synchronized methods/blocks
  - Approaches to Synchronization
    - Copy on Write: all values stored in immutible array, new arrayy created if any modifications
      - only write operations synchronized (not read)
      - CopyOnWriteArrayList
    - Compare and Swap: cache values for each element, compare each value with cached value, if no change then safe to use/update, if changed then try again or skip
    - lock: used to divide methods into different blocks that only run after previous complete
  - Atomic Operations: happens all at once, either all complete or none
    - 


GENERICS
- General
  - used to create generic classes/methods which can be used by various/other Types
- Class
  - class MyGenericClass<T>
  - <T extends/super class> restricts to sub/super classes
- Method

FUNCTIONAL PROGRAMMING
- Lambdas
- Streams

MULTITHREADING
- 

MISC
- Serialization: convert object to some object representation (string, bytes, json, xml, etc)
  - the process of converting an object's state into a format that can be stored or transmitted, allowing it to be recreated later
  - This is often done by converting an object into a stream of bytes or a textual format like JSON or XML
  - Reasons: 1) Storing objects in files or databases, 2) Transmitting objects over a network, 3) Sharing data between different applications/systems
  - use Serializable interface
  - "Transient" fields are properties on the object that do not need to be serialized and get ignored
- Deserialization: convert some object representation back to an object
















